name: Verify
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "*"

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        if: github.event_name == 'pull_request'
        uses: styfle/cancel-workflow-action@0.9.1

      - name: Checkout
        uses: actions/checkout@v1

      - name: Unlock
        uses: sliteteam/github-action-git-crypt-unlock@1.2.0
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: Setup Kind
        uses: helm/kind-action@v1.2.0

      - name: Create admin user and replace token
        run: |
          kubectl -n kube-system create serviceaccount pepa
          kubectl create clusterrolebinding pepa-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:pepa

          export TOKENNAME=`kubectl -n kube-system get serviceaccount/pepa -o jsonpath='{.secrets[0].name}'`
          export TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode`

          cat ~/.kube/config

          export API_URL=`awk '/server/{print $NF}' ~/.kube/config`
          sed -i -e "s#server_api_url#$API_URL#g" -e "s#placeholder#$TOKEN#g" examples/clusters.yaml

          cat examples/clusters.yaml

          sudo pip install openshift pyyaml

      - name: Install CICD
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/github-actions-configure-tealc-environment.yaml

      - name: Try test pipeline
        run: |
          ./.github/workflows/test-scripts/run-test-pipeline.sh

      - name: Deploy argo entrypoint
        run: |
          ./.github/workflows/test-scripts/install-argo-entrypoint.sh

      - name: Print kube status
        if: failure()
        run: |
          kubectl get ns
          echo "--------------------------------------"
          kubectl get po --all-namespaces
          echo "--------------------------------------"
          kubectl get events --all-namespaces
          echo "--------------------------------------"
          kubectl get pipelinerun --allnamespaces
          echo "--------------------------------------"
          kubectl get taskrun --allnamespaces
          echo "--------------------------------------"
          kubectl get pipeline --allnamespaces
          echo "--------------------------------------"
          kubectl get task --allnamespaces
