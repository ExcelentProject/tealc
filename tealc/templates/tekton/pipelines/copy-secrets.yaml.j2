apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: secrets-sync
  labels:
    project: tealc
spec:
  params:
    - name: sourceNamespace
      description: Source namespace from where we should cop the secret
    - name: targetNamespace
      description: Target namespace secret where secret should be
    - name: secretName
      description: Name of the secret to sync
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: TaskRun
      metadata:
        generateName: sync-$(tt.params.secretName)
      spec:
        serviceAccountName: pipeline
        taskSpec:
          params:
            - name: sourceNamespace
            - name: targetNamespace
            - name: secretName
          steps:
            - name: secrets-sync-pr-tr
              image: quay.io/rh_integration/strimzi-tools:latest
              env:
                - name: OC_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: username
                - name: OC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: password
                - name: OC_API_URL
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: server
              script: |
                
                set +x

                oc login -u $OC_USERNAME -p $OC_PASSWORD $OC_API_URL --insecure-skip-tls-verify=true
        
                set -x
                
                oc delete secret -n $(params.targetNamespace) $(params.secretName) || true
                oc get secret -n $(params.sourceNamespace) $(params.secretName) -o yaml | yq eval 'del(.metadata.namespace,.metadata.ownerReferences)' - | oc apply -n $(params.targetNamespace) -f -
        params:
          - name: sourceNamespace
            value: $(tt.params.sourceNamespace)
          - name: targetNamespace
            value: $(tt.params.targetNamespace)
          - name: secretName
            value: $(tt.params.secretName)
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: secrets-sync
  labels:
    project: tealc
spec:
  params:
    - name: sourceNamespace
      value: $(body.params.sourceNamespace)
    - name: targetNamespace
      value: $(body.params.targetNamespace)
    - name: secretName
      value: $(body.params.secretName)

---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: secrets-sync
  labels:
    project: tealc
spec:
  serviceAccountName: pipeline
  triggers:
    - name: cleanup
      interceptors:
        - cel:
            filter: >-
              'trigger-template' in body &&
              body['trigger-template'] == 'syncup-secrets'
      bindings:
        - ref: secrets-sync
      template:
        ref: secrets-sync

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secrets-sync-trigger
  labels:
    project: tealc
spec:
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: workspace
              emptyDir: {}
            - name: configmap-volume
              configMap:
                defaultMode: 0700
                name: secrets-sync
          containers:
            - name: trigger
              image: quay.io/rh_integration/strimzi-tools:latest
              command:
                - /bin/entrypoint.sh
              volumeMounts:
                - mountPath: /workspace
                  name: workspace
                - name: configmap-volume
                  mountPath: /bin/entrypoint.sh
                  readOnly: true
                  subPath: entrypoint.sh
              env:
                - name: SINK_URL
                  value: "el-secrets-sync.tealc.svc.cluster.local:8080"
                - name: OC_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: username
                - name: OC_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: password
                - name: OC_API_URL
                  valueFrom:
                    secretKeyRef:
                      name: {{ name }}-tekton
                      key: server
                - name: KUBECONFIG
                  value: "/workspace/config"
          restartPolicy: Never


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-sync
  labels:
    project: tealc
data:
  entrypoint.sh: |
    #!/bin/bash

    set +x

    oc login -u $OC_USERNAME -p $OC_PASSWORD $OC_API_URL --insecure-skip-tls-verify=true

    set -x
    set -e

    SOURCE_PASSWORD=$(oc get secret -n strimzi-kafka anubis-cluster-ca-cert -o jsonpath='{.data.ca\.password}' | base64 -d)
    TARGET_PASSWORD=$(oc get secret -n strimzi-twitter-connector anubis-cluster-ca-cert -o jsonpath='{.data.ca\.password}' | base64 -d)
    
    if [[ $SOURCE_PASSWORD != $TARGET_PASSWORD ]]; then
      curl -d '{"trigger-template": "syncup-secrets","params": {"sourceNamespace": "strimzi-kafka","targetNamespace": "strimzi-twitter-connector","secretName": "anubis-cluster-ca-cert"}}' $SINK_URL  
    fi
    
    SOURCE_PASSWORD=$(oc get secret -n strimzi-kafka hathor -o jsonpath='{.data.user\.password}' | base64 -d)
    TARGET_PASSWORD=$(oc get secret -n strimzi-twitter-connector hathor -o jsonpath='{.data.user\.password}' | base64 -d)
    
    if [[ $SOURCE_PASSWORD != $TARGET_PASSWORD ]]; then
      curl -d '{"trigger-template": "syncup-secrets","params": {"sourceNamespace": "strimzi-kafka","targetNamespace": "strimzi-twitter-connector","secretName": "hathor"}}' $SINK_URL 
    fi
    
    SOURCE_PASSWORD=$(oc get secret -n strimzi-kafka her-ur -o jsonpath='{.data.user\.password}' | base64 -d)
    TARGET_PASSWORD=$(oc get secret -n strimzi-twitter-connector her-ur -o jsonpath='{.data.user\.password}' | base64 -d)
    
    if [[ $SOURCE_PASSWORD != $TARGET_PASSWORD ]]; then
      curl -d '{"trigger-template": "syncup-secrets","params": {"sourceNamespace": "strimzi-kafka","targetNamespace": "strimzi-twitter-connector","secretName": "her-ur"}}' $SINK_URL  
    fi